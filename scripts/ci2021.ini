[FIXED]
number_of_bits = 8
number_of_agents = 256
number_of_steps = 150
seed_val = 0

#tx_matrix.type = ising-trial
#tx_matrix.pzero = .2
#tx_matrix.width = 5
#tx_matrix.attractors$code = [(1,400),(2,100),(4,100),(8,100),(16,100),(32,100),(64,100),(128,100)]
#tx_matrix.attractors$code = [(255,.9),(1,.7),(2,.7),(4,.7),(8,.7),(16,.7),(32,.7),(64,.7),(128,.7)]
tx_matrix.attractors$code = [(255,.9),(1,.7),(2,.7),(4,.7),(8,.7),(16,.7),(32,.7),(64,.7),(128,.7),(3,.7),(6,.7),(12,.7),(24,.7),(48,.7),(96,.7),(192,.7)]
#tx_matrix.attractors$code = [(255,.9),(1,.6),(7,.6),(2,.6),(4,.6),(20,.6),(8,.6),(56,.6),(80,.6),(112,.6),(160,.6),(236,.6)]
#tx_matrix.attractors$code = [(128,200)]
#tx_matrix.attractors$code = [(0,20,4)]+[(a,10,4) for a in random.sample(range(1,256),255)]
tx_matrix.type = manual
tx_matrix.search_width = 4
#tx_matrix.type = loadable
#tx_matrix.noise = .001
#tx_matrix.filename = ci2021.test2.npy
#tx_matrix.type = hamming_sweep


#alpha.sigma = .5
alpha.type = power_distribution
#alpha.r = -.5

graph.type = newman-watts-strogatz
graph.k = 5
graph.p = .3

tau.type = direct-proportion
#tau.lower = 0.1
#tau.upper = 1
#tau.mu = 0.5
#tau.sigma = 0.1
#tau.n_samples = 256


[EXPERIMENT]
#alpha$code = list(np.log10(np.array(range(1,21)))/np.log10(20))
#alpha.value$code = list(np.log10(np.array(range(1,11)))/np.log10(10))
#alpha.params$code = [(2,.1),(2,.5),(2,1),(1.5,1),(1,1),(3,3),(5,5),(1,2),(.5,2),(.1,2)]
#alpha.r$iter = -3,3,13
#tx_matrix.deviation$code = utilities.build_tan_mapped_linspace(0,1,11,slope=.27,period=2.6)
#tx_matrix.amplification$iter = 1,4,7
alpha.r$iter = -3,3,15
#tx_matrix.attractor_width$iter = 1,8,8

#alpha.value$iter = 0,.5,6
tx_matrix.num_attractors$iter = 1,16,16
tx_matrix.attractor_width$iter = 2,4,2
tx_matrix.local_depth$code = [.3,.4,.5,.6,.7]
#tx_matrix.mu$iter = .4,.95,12

[EXECUTION]
replications = 5
nesting = tx_matrix.local_depth, tx_matrix.attractor_width,tx_matrix.num_attractors, alpha.r


